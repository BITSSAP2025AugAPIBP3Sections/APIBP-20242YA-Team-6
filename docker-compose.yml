
services:
  nats:
    image: nats:2-alpine
    ports:
      - "4222:4222"
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.7
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      # Required for single-node KRaft mode (controller quorum voters list id@host:controllerPort)
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
    restart: unless-stopped

  kong-gateway:
    image: kong:3.4-alpine
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000
    ports:
      - "8080:8000"   # Proxy port (main API gateway)
      - "8001:8001"   # Admin API port
    volumes:
      - ./kong/kong-simple.yml:/kong/declarative/kong.yml
    depends_on:
      - auth-service
      - events-service
      - vendors-service
      - tasks-service
      - attendees-service
      - notifications-service

  auth-service:
    build: ./services/auth
    env_file:
      - ./services/auth/.env.example
    ports:
      - "8001:8001"
    depends_on:
      - auth-db
      - nats

  events-service:
    build: ./services/events
    ports:
      - "8002:8002"
    depends_on:
      - events-db
      - nats

  vendors-service:
    build: ./services/vendors
    ports:
      - "8003:8003"
    depends_on:
      - vendors-db
      - nats

  tasks-service:
    build: ./services/tasks
    ports:
      - "8004:8004"
    depends_on:
      - tasks-db
      - nats

  attendees-service:
    build: ./services/attendees
    ports:
      - "8005:8005"
    depends_on:
      - attendees-db
      - nats

  notifications-service:
    build: ./services/notifications
    ports:
      - "8006:8006"
    environment:
      - KAFKA_BROKERS=kafka:9092
      - PORT=8006
    depends_on:
      - kafka
      - nats

  auth-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: auth
      POSTGRES_PASSWORD: authpw
      POSTGRES_DB: auth
    volumes:
      - auth_pg_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  events-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: events
      POSTGRES_PASSWORD: eventspw
      POSTGRES_DB: events
    volumes:
      - events_pg_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  vendors-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: vendors
      POSTGRES_PASSWORD: vendorspw
      POSTGRES_DB: vendors
    volumes:
      - vendors_pg_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"

  tasks-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: tasks
      POSTGRES_PASSWORD: taskspw
      POSTGRES_DB: tasks
    volumes:
      - tasks_pg_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"

  attendees-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: attendees
      POSTGRES_PASSWORD: attendeespw
      POSTGRES_DB: attendees
    volumes:
      - attendees_pg_data:/var/lib/postgresql/data
    ports:
      - "5437:5432"

volumes:
  auth_pg_data:
  events_pg_data:
  vendors_pg_data:
  tasks_pg_data:
  attendees_pg_data:
